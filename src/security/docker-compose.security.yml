version: '3.8'

# Security-Enhanced Docker Compose Configuration for n8n Stack
# Includes reverse proxy, SSL termination, secrets management, and network isolation

secrets:
  postgres_user:
    file: ./secrets/postgres_user.txt
  postgres_password:
    file: ./secrets/postgres_password.txt
  postgres_db:
    file: ./secrets/postgres_db.txt
  n8n_basic_auth_user:
    file: ./secrets/n8n_basic_auth_user.txt
  n8n_basic_auth_password:
    file: ./secrets/n8n_basic_auth_password.txt
  n8n_encryption_key:
    file: ./secrets/n8n_encryption_key.txt

networks:
  # Frontend network (external access)
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  # Backend network (internal services)
  backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16
  
  # Database network (most restricted)
  database:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  postgres_data:
    driver: local
  n8n_data:
    driver: local
  nginx_logs:
    driver: local
  fail2ban_data:
    driver: local

services:
  # Reverse Proxy with SSL Termination
  nginx:
    image: nginx:1.25-alpine
    container_name: n8n_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Monitoring endpoint
    volumes:
      - ./nginx/nginx.conf.main:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - frontend
      - backend
    depends_on:
      - n8n
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp
    labels:
      - "traefik.enable=false"

  # Intrusion Prevention System
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: n8n_fail2ban
    restart: unless-stopped
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - nginx_logs:/var/log/nginx:ro
      - ./fail2ban/jail.local:/etc/fail2ban/jail.local:ro
      - ./fail2ban/filter-nginx-auth.conf:/etc/fail2ban/filter.d/nginx-auth.conf:ro
      - ./fail2ban/filter-nginx-limit-req.conf:/etc/fail2ban/filter.d/nginx-limit-req.conf:ro
      - fail2ban_data:/data
    environment:
      - TZ=UTC
      - F2B_LOG_LEVEL=INFO
      - F2B_LOG_TARGET=STDOUT
    depends_on:
      - nginx

  # PostgreSQL Database with Security Hardening
  postgres:
    image: postgres:15-alpine
    container_name: n8n_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - database
    secrets:
      - postgres_user
      - postgres_password
      - postgres_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/postgres_user) -d $$(cat /run/secrets/postgres_db)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 80s
    security_opt:
      - no-new-privileges:true
    user: postgres
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # n8n Application with Security Configuration
  n8n:
    build:
      context: ../n8n/src
      dockerfile: Dockerfile
    container_name: n8n_app
    restart: unless-stopped
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER_FILE=/run/secrets/postgres_user
      - DB_POSTGRESDB_PASSWORD_FILE=/run/secrets/postgres_password
      - DB_POSTGRESDB_DATABASE_FILE=/run/secrets/postgres_db
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER_FILE=/run/secrets/n8n_basic_auth_user
      - N8N_BASIC_AUTH_PASSWORD_FILE=/run/secrets/n8n_basic_auth_password
      - N8N_ENCRYPTION_KEY_FILE=/run/secrets/n8n_encryption_key
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://localhost/webhook/
      - N8N_SECURE_COOKIE=true
      - N8N_LOG_LEVEL=info
      - N8N_LOG_OUTPUT=console
      - N8N_DISABLE_PRODUCTION_MAIN_PROCESS=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_VERSION_NOTIFICATIONS_ENABLED=false
      - N8N_TEMPLATES_ENABLED=false
      - N8N_PUBLIC_API_DISABLED=true
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=168
    volumes:
      - n8n_data:/home/node/.n8n
      - ../n8n/src/localfiles:/data/localfiles:rw
    networks:
      - backend
      - database
    secrets:
      - postgres_user
      - postgres_password
      - postgres_db
      - n8n_basic_auth_user
      - n8n_basic_auth_password
      - n8n_encryption_key
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"

  # Workflow Importer with Security
  workflow-importer:
    build:
      context: ../n8n/src
      dockerfile: Dockerfile
    container_name: n8n_workflow_importer
    environment:
      - N8N_HOST=n8n
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_BASIC_AUTH_USER_FILE=/run/secrets/n8n_basic_auth_user
      - N8N_BASIC_AUTH_PASSWORD_FILE=/run/secrets/n8n_basic_auth_password
    volumes:
      - ../n8n/src/workflows:/data/workflows:ro
      - ../n8n/src/scripts:/scripts:ro
    networks:
      - backend
    secrets:
      - n8n_basic_auth_user
      - n8n_basic_auth_password
    depends_on:
      n8n:
        condition: service_healthy
    command: ["/scripts/import-workflows.sh"]
    restart: "no"
    security_opt:
      - no-new-privileges:true

  # Ollama AI Service with Security
  ollama:
    image: ollama/ollama:latest
    container_name: n8n_ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - backend
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_ORIGINS=http://n8n:5678,https://localhost
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Nginx Exporter for Monitoring
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.10.0
    container_name: n8n_nginx_exporter
    restart: unless-stopped
    command:
      - '-nginx.scrape-uri=http://nginx:8080/nginx_status'
    networks:
      - backend
      - frontend
    depends_on:
      - nginx
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"
